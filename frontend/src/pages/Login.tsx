import React, { useState, useEffect } from 'react';
import { Container, Paper, Typography, Box, Alert, CircularProgress, Button } from '@mui/material';
import { Telegram, CheckCircle } from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';

type Status = 'waiting' | 'loading' | 'success' | 'error';

const Login: React.FC = () => {
  const [status, setStatus] = useState<Status>('waiting');
  const [error, setError] = useState<string>('');
  const navigate = useNavigate();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ Telegram
    // checkTelegramAuth();

    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setStatus('waiting');
  }, []);

  const checkTelegramAuth = async () => {
    try {
      setStatus('loading');

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API
      const telegramAuth = localStorage.getItem('telegram_auth');

      if (telegramAuth) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        setStatus('success');
        setTimeout(() => {
          navigate('/dashboard');
        }, 1500);
      } else {
        setStatus('waiting');
      }
    } catch {
      setStatus('error');
      setError(
        '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438',
      );
    }
  };

  const handleTelegramLogin = () => {
    // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
    if (window.Telegram && window.Telegram.WebApp) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API
      window.Telegram.WebApp.ready();
      window.Telegram.WebApp.expand();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = window.Telegram.WebApp.initDataUnsafe?.user;
      if (user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        localStorage.setItem('telegram_auth', JSON.stringify(user));
        setStatus('success');
        setTimeout(() => {
          navigate('/dashboard');
        }, 1500);
      }
    } else {
      // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å Telegram –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥
      window.open('https://t.me/your_bot_username', '_blank');
    }
  };

  const renderContent = () => {
    switch (status) {
      case 'loading':
        return (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <CircularProgress size={60} sx={{ mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...
            </Typography>
            <Typography variant="body2" color="text.secondary">
              –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç
            </Typography>
          </Box>
        );

      case 'success':
        return (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <CheckCircle sx={{ fontSize: 60, color: 'success.main', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
            </Typography>
            <Typography variant="body2" color="text.secondary">
              –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...
            </Typography>
          </Box>
        );

      case 'error':
        return (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <Alert severity="error" sx={{ mb: 3 }}>
              {error}
            </Alert>
            <Button variant="contained" onClick={checkTelegramAuth} size="large">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </Box>
        );

      default:
        return (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <Telegram sx={{ fontSize: 60, color: 'primary.main', mb: 2 }} />
            <Typography variant="h4" component="h1" gutterBottom>
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
              –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É—Ü–∏–∏ –∞—É–¥–∏–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
            </Typography>

            <Button
              variant="contained"
              size="large"
              startIcon={<Telegram />}
              onClick={handleTelegramLogin}
              sx={{ mb: 2 }}
            >
              –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram
            </Button>

            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Telegram
            </Typography>

            {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <Button
              variant="outlined"
              size="large"
              onClick={() => navigate('/dashboard')}
              sx={{ mt: 2 }}
            >
              üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∞—à–±–æ—Ä–¥—É (—Ç–µ—Å—Ç)
            </Button>
          </Box>
        );
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 8 }}>
      <Paper elevation={3} sx={{ p: 4 }}>
        {renderContent()}
      </Paper>
    </Container>
  );
};

export default Login;
